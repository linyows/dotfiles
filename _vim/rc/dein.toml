[[plugins]]
repo = 'vim-scripts/sudo.vim'

[[plugins]]
repo = 'vim-scripts/Smooth-Scroll'
hook_add = '''
  nnoremap <Space>jj :call SmoothScroll("d",2, 2)<Enter>
  nnoremap <Space>j :call SmoothScroll("d",1, 1)<Enter>
  nnoremap <Space>kk :call SmoothScroll("u",2, 2)<Enter>
  nnoremap <Space>k :call SmoothScroll("u",1, 1)<Enter>
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter.git'
hook_add = '''
  let g:NERDSpaceDelims=1
  let g:NERDDefaultAlign='left'
  let g:NERDShutUp=1
'''

[[plugins]]
repo = 'vim-scripts/AutoComplPop'

[[plugins]]
repo = 'Shougo/neocomplcache'
hook_add = '''
  let g:acp_enableAtStartup = 0
  let g:neocomplcache_enable_at_startup = 1
  let g:neocomplcache_enable_smart_case = 1
  let g:neocomplcache_min_syntax_length = 3
  let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

  let g:neocomplcache_dictionary_filetype_lists = {
      \ 'default' : '',
      \ 'vimshell' : $HOME.'/.vimshell_hist',
      \ 'scheme' : $HOME.'/.gosh_completions'
          \ }

  if !exists('g:neocomplcache_keyword_patterns')
      let g:neocomplcache_keyword_patterns = {}
  endif
  let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

  inoremap <expr><C-g>     neocomplcache#undo_completion()
  inoremap <expr><C-l>     neocomplcache#complete_common_string()

  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    return neocomplcache#smart_close_popup() . "\<CR>"
  endfunction
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
  inoremap <expr><C-y>  neocomplcache#close_popup()
  inoremap <expr><C-e>  neocomplcache#cancel_popup()

  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

  if !exists('g:neocomplcache_force_omni_patterns')
    let g:neocomplcache_force_omni_patterns = {}
  endif
  "let g:neocomplcache_force_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
  let g:neocomplcache_force_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
  let g:neocomplcache_force_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
'''

[[plugins]]
repo = 'ujihisa/neco-look'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  nnoremap <silent> <Space>id :<C-u>IndentGuidesToggle<Enter>
  let g:indent_guides_auto_colors = 0
  let g:indent_guides_start_level = 2
  let g:indent_guides_guide_size = 1
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red ctermbg=3
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
  if 'dark' == &background
    hi IndentGuidesOdd  ctermbg=black
    hi IndentGuidesEven ctermbg=darkgrey
  else
    hi IndentGuidesOdd  ctermbg=white
    hi IndentGuidesEven ctermbg=lightgrey
  endif
'''

[[plugins]]
repo = 'vim-scripts/xmledit'

[[plugins]]
repo = 'vim-scripts/Align'
hook_add = '''
  let g:Align_xstrlen = 3
  vmap <Space>s <Leader>tsp
  smap <Space>s <Leader>tsp
  vmap <Space>a : Align
  smap <Space>a : Align
'''

[[plugins]]
repo = 'LeafCage/yankround.vim'
hook_add = '''
  nmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap gp <Plug>(yankround-gp)
  nmap gP <Plug>(yankround-gP)
  "nmap <C-p> <Plug>(yankround-prev)
  "nmap <C-n> <Plug>(yankround-next)
  nnoremap <silent> ,y :<C-u>Unite yankround<CR>
'''

[[plugins]]
repo = 'vim-scripts/eregex.vim'

[[plugins]]
repo = 'nazo/pt.vim'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'rhysd/vim-operator-surround'
hook_add = '''
  " operator mappings
  map <silent>sa <Plug>(operator-surround-append)
  map <silent>sd <Plug>(operator-surround-delete)
  map <silent>sr <Plug>(operator-surround-replace)

  " delete or replace most inner surround

  " if you use vim-textobj-multiblock
  nmap <silent>sdd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
  nmap <silent>srr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)

  " if you use vim-textobj-anyblock
  nmap <silent>sdd <Plug>(operator-surround-delete)<Plug>(textobj-anyblock-a)
  nmap <silent>srr <Plug>(operator-surround-replace)<Plug>(textobj-anyblock-a)

  " if you use vim-textobj-between
  nmap <silent>sdb <Plug>(operator-surround-delete)<Plug>(textobj-between-a)
  nmap <silent>srb <Plug>(operator-surround-replace)<Plug>(textobj-between-a)
'''

[[plugins]]
repo = 'tpope/vim-abolish'

[[plugins]]
repo = 'vim-scripts/taglist.vim'
hook_add = '''
  set tags=tags
  "set tags+=~/.tags
  let Tlist_Ctags_Cmd = '/Applications/MacVim.app/Contents/MacOS/ctags'
  let Tlist_Show_One_File = 1
  let Tlist_Exit_OnlyWindow = 1
  let Tlist_Use_Right_Window = 1
  let Tlist_Enable_Fold_Column = 1
  let Tlist_Auto_Open = 0
  let Tlist_Auto_Update = 1
  let Tlist_WinWidth = 30
  map <silent> <leader>l :Tlist<CR>
'''

[[plugins]]
repo = 'vim-scripts/Source-Explorer-srcexpl.vim'

[[plugins]]
repo = 'taku-o/vim-copypath'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'szw/vim-tags'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'banyan/recognize_charcode.vim'

[[plugins]]
repo = 'osyo-manga/vim-over'

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'Lokaltog/vim-easymotion'

[[plugins]]
repo = 'vim-scripts/fakeclip'

[[plugins]]
repo = 'Lokaltog/vim-powerline'

[[plugins]]
repo = 'vim-scripts/DrawIt'

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'

[[plugins]]
repo = 'koron/codic-vim'

#[[plugins]]
#repo = 'thinca/vim-guicolorscheme'

#[[plugins]]
#repo = 'godlygeek/csapprox'

#[[plugins]]
#repo = 'larssmit/vim-getafe'

[[plugins]]
repo = 'altercation/vim-colors-solarized'

#[[plugins]]
#repo = 'tomasr/molokai'

#[[plugins]]
#repo = 'Slashbunny/vim-colorsamplerpack'
