[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
on_source = ['unite.vim', 'vimshell.vim']

[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'
hook_add = '''
  let g:unite_data_directory = expand('~/.vim/tmp/plugin/.unite')
  let g:unite_source_grep_default_opts = '-Hn --color=never'
  if executable('ack-grep')
    let g:unite_source_grep_command = 'ack-grep'
    let g:unite_source_grep_default_opts = '--no-heading --no-color -a'
  endif
  nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
  nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
  nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
  nnoremap <silent> ,um :<C-u>Unite file_mru<CR>
  nnoremap <silent> ,uu :<C-u>Unite buffer file_mru<CR>
  nnoremap <silent> ,ua :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
  au FileType unite nnoremap <silent> <buffer> <expr> <C-s> unite#do_action('split')
  au FileType unite inoremap <silent> <buffer> <expr> <C-s> unite#do_action('split')
  au FileType unite nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
  au FileType unite inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
  au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
  au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
  imap <C-k> <Plug>(neocomplcache_snippets_expand)
  smap <C-k> <Plug>(neocomplcache_snippets_expand)
  inoremap <expr><C-g> neocomplcache#undo_completion()
  inoremap <expr><C-l> neocomplcache#complete_common_string()
'''

[[plugins]]
repo = 'Shougo/vimfiler'
depends = 'unite.vim'
on_map = {n = '<Plug>'}
on_if = "isdirectory(bufname('%'))"
hook_add = '''
  nnoremap <silent>   [Space]v   :<C-u>VimFiler -invisible<CR>'
  nnoremap [Space]ff :<C-u>VimFiler -buffer-name=explorer -split -simple -winwidth=35 -toggle<CR>
'''
hook_source = '''
  call vimfiler#custom#profile('default', 'context', {
      \ 'safe' : 0,
      \ 'auto_expand' : 1,
      \ 'parent' : 0,
      \ })
  let g:vimfiler_as_default_explorer = 1
  if IsWindows()
    let g:vimfiler_detect_drives = [
        \ 'C:/', 'D:/', 'E:/', 'F:/', 'G:/', 'H:/', 'I:/',
        \ 'J:/', 'K:/', 'L:/', 'M:/', 'N:/']
    " Use trashbox.
    let g:unite_kind_file_use_trashbox = 1
  else
    let g:vimfiler_tree_leaf_icon = ' '
    let g:vimfiler_tree_opened_icon = '▾'
    let g:vimfiler_tree_closed_icon = '▸'
    let g:vimfiler_file_icon = ' '
    let g:vimfiler_readonly_file_icon = '✗'
    let g:vimfiler_marked_file_icon = '✓'
  endif
  autocmd MyAutoCmd FileType vimfiler call s:vimfiler_my_settings()
  function! s:vimfiler_my_settings() abort "{{{
    nmap <buffer> <Tab> <Plug>(vimfiler_switch_to_other_window)
  endfunction"}}}
'''

[[plugins]]
repo = 'Shougo/vimshell.vim'
on_map = {n = '<Plug>'}
hook_add = '''
  let g:vimshell_temporary_directory = expand('~/.vim/tmp/plugin/.vimshell')
  nnoremap <silent> ,vs :<C-u>VimShell<CR>
  nnoremap <silent> ,vp :<C-u>VimShellInteractive python<CR>
  nnoremap <silent> ,vr :<C-u>VimShellInteractive irb<CR>
  vmap <silent> ,ss :<C-u>VimShellSendString<CR>
  nnoremap <silent> ,ss <S-v>:<C-u>VimShellSendString<CR>
'''

[[plugins]]
repo = 'ujihisa/vimshell-ssh'

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_if = 1

#see more plugin http://bit.ly/m5PKnU
[[plugins]]
repo = 'Sixeight/unite-grep'
depends = 'unite.vim'

[[plugins]]
repo = 'tsukkee/unite-help'
depends = 'unite.vim'

[[plugins]]
repo = 'h1mesuke/unite-outline'
depends = 'unite.vim'

[[plugins]]
repo = 'thinca/vim-unite-history'
depends = 'unite.vim'

[[plugins]]
repo = 'osyo-manga/unite-env'
depends = 'unite.vim'

[[plugins]]
repo = 'tungd/unite-session'
depends = 'unite.vim'

[[plugins]]
repo = 'tsukkee/unite-tag'
depends = 'unite.vim'
hook_add = '''
  "noremap <silent> <C-]> :<C-u>Unite tags:<C-r>=expand('<cword>')<CR><CR>
  noremap <silent> <C-]> :<C-u>Unite -immediately -no-start-insert tags:<C-r>=expand('<cword>')<CR><CR>
  autocmd BufEnter *
  \  if empty(&buftype)
  \|      nnoremap <buffer> <C-]> :<C-u>UniteWithCursorWord -immediately tag<CR>
  \| endif
  autocmd BufEnter *
  \  if empty(&buftype)
  \|      nnoremap <buffer> <C-t> :<C-u>Unite jump<CR>
  \| endif
  nnoremap <silent> ,t :<C-u>Unite tag<CR>
'''

[[plugins]]
repo = 'tacroe/unite-alias'
depends = 'unite.vim'

[[plugins]]
repo = 'ujihisa/unite-font'
depends = 'unite.vim'

[[plugins]]
repo = 'ujihisa/unite-colorscheme'
depends = 'unite.vim'

[[plugins]]
repo = 'ujihisa/unite-locate'
depends = 'unite.vim'

[[plugins]]
repo = 'mattn/unite-remotefile'
depends = 'unite.vim'

#[[plugins]]
#repo = 'mattn/unite-mcdonalds-vim'
#depends = 'unite.vim'

#[[plugins]]
#repo = 'mattn/unite-genpatsu-fukushima-vim'
#depends = 'unite.vim'

[[plugins]]
repo = 'Shougo/neosnippet'
hook_add = '''
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: "\<TAB>"

  " For snippet_complete marker.
  "if has('conceal')
  "  set conceallevel=2 concealcursor=i
  "endif

  " Enable snipMate compatibility feature.
  "let g:neosnippet#enable_snipmate_compatibility = 1
  " Tell Neosnippet about the other snippets
  "let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'
  let g:neosnippet#snippets_directory =
      \'~/.vim/snippets,~/.vim/bundle/vim-go/gosnippets/snippets,~/.vim/bundle/serverspec-snippets,~/.vim/bundle/neosnippet_chef_recipe_snippet/autoload/neosnippet/snippets'
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
depends = 'neosnippet'

[[plugins]]
repo = 'vim-scripts/c.vim'
on_ft = 'c'

[[plugins]]
repo = 'rhysd/vim-clang-format'
on_ft = 'c'
hook_add = '''
  let g:clang_format#style_options = {
    \ "BasedOnStyle": "LLVM",
    \ "IndentWidth": 2,
    \ "ColumnLimit": 100,
    \ "BreakBeforeBraces": "Linux",
    \ "AllowShortFunctionsOnASingleLine": "None"}
  " map to <Leader>cf in C++ code
  autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
  autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>
  " if you install vim-operator-user
  autocmd FileType c,cpp,objc map <buffer><Leader>x <Plug>(operator-clang-format)
  " Toggle auto formatting:
  nmap <Leader>C :ClangFormatAutoToggle<CR>
  autocmd FileType c ClangFormatAutoEnable
'''

[[plugins]]
repo = 'vim-scripts/gtags.vim'
on_ft = 'c'
hook_add = '''
  map <C-g> :Gtags 
  map <C-h> :Gtags -f %<CR>
  map <C-j> :GtagsCursor<CR>
  map <C-n> :cn<CR>
  map <C-p> :cp<CR>
'''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_add = '''
  au FileType go map ,g :w\|:!go run %<cr>
  au FileType go map ,t :w\|:!go test %<cr>

  if isdirectory('/usr/local/opt/go/libexec')
    let g:go_fmt_command = 'goimports'
    set rtp^=/usr/local/opt/go/libexec/misc/vim
  endif

  if isdirectory($GOPATH)
    exe "set rtp+=".globpath($GOPATH, "src/github.com/nsf/gocode/vim")
    set completeopt=menu,preview
    au BufWritePre *.go :GoFmt
    au BufNewFile,BufRead *.go set sw=2 noexpandtab ts=2
    "exe "set rtp+=".globpath($GOPATH, "src/github.com/golang/lint/misc/vim")
    "autocmd BufWritePost,FileWritePost *.go execute 'Lint' | cwindow
  endif

  au FileType go compiler go
  " not showing tab-indent if golang
  au FileType go set listchars=tab:\ \ 
  au FileType go highlight NonText ctermbg=NONE ctermfg=DarkGreen
  au FileType go highlight SpecialKey ctermbg=NONE ctermfg=DarkBlue
  au FileType go auto BufWritePre * :%s/'/"/ge

  let g:go_snippet_engine = 'neosnippet'
  "let g:go_play_open_browser = 0
  "let g:go_fmt_fail_silently = 1
  "let g:go_fmt_autosave = 0
  au FileType go nmap <Leader>i <Plug>(go-info)
  au FileType go nmap <Leader>gd <Plug>(go-doc)
  au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
  au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
  au FileType go nmap <leader>r <Plug>(go-run)
  au FileType go nmap <leader>b <Plug>(go-build)
  au FileType go nmap <leader>t <Plug>(go-test)
  au FileType go nmap <Leader>ds <Plug>(go-def-split)
  au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
  au FileType go nmap <Leader>dt <Plug>(go-def-tab)

  autocmd FileType go :highlight goErr cterm=none ctermfg=DarkYellow
  autocmd FileType go :match goErr /\<err\>/
'''

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'

[[plugins]]
repo = 'rhysd/rust-doc.vim'
on_ft = 'rust'

[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_ft = 'ruby'

[[plugins]]
repo = 'tpope/vim-rails'
on_ft = 'ruby'

[[plugins]]
repo = 'joker1007/vim-ruby-heredoc-syntax'
on_ft = 'ruby'

[[plugins]]
repo = 'sunaku/vim-ruby-minitest'
on_ft = 'ruby'

[[plugins]]
repo = 'rhysd/unite-ruby-require.vim'
on_ft = 'ruby'

[[plugins]]
repo = 'glidenote/serverspec-snippets'
on_ft = 'ruby'

[[plugins]]
repo = 'glidenote/rspec-result-syntax'
on_ft = 'ruby'

[[plugins]]
repo = 'rhysd/neco-ruby-keyword-args'
on_ft = 'ruby'

[[plugins]]
repo = 'ryuzee/neocomplcache_php_selenium_snippet'
on_ft = 'php'

[[plugins]]
repo = 'vim-scripts/php.vim--Garvin'
on_ft = 'php'

[[plugins]]
repo = 'vim-scripts/php.vim'
on_ft = 'php'

[[plugins]]
repo = 'vim-scripts/php_localvarcheck.vim'
on_ft = 'php'

[[plugins]]
repo = 'sumpygump/php-documentor-vim'
on_ft = 'php'

[[plugins]]
repo = 'h1mesuke/vim-unittest'
on_ft = 'vim'

[[plugins]]
repo = 'scrooloose/syntastic'
on_ft = 'javascript'

[[plugins]]
repo = 'moll/vim-node'
on_ft = 'javascript'

[[plugins]]
repo = 'juvenn/mustache.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'othree/es.next.syntax.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'jelera/vim-javascript-syntax'
on_ft = 'javascript'

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'
hook_add = '''
  let g:typescript_indent_disable = 1
'''

[[plugins]]
repo = 'vim-scripts/nginx.vim'
on_ft = 'nginx'

[[plugins]]
repo = 'tpope/vim-markdown'
on_ft = 'markdown'

[[plugins]]
repo = 'joker1007/vim-markdown-quote-syntax'
on_ft = 'markdown'

[[plugins]]
repo = 'superbrothers/vim-quickrun-markdown-gfm'

[[plugins]]
repo = 'digitaltoad/vim-jade'
on_ft = 'jade'

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = 'coffeescript'

[[plugins]]
repo = 'tpope/vim-haml'
on_ft = 'haml'

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = 'slim'

[[plugins]]
repo = 'puppetlabs/puppet-syntax-vim'
on_ft = 'puppet'

[[plugins]]
repo = 'fatih/vim-hclfmt'
on_ft = 'hcl'

[[plugins]]
repo = 'c9s/cascading.vim'
on_ft = 'php'
on_ft = 'ruby'
on_ft = 'perl'

[[plugins]]
repo = 'mattboehm/vim-unstack'
on_ft = 'go'
on_ft = 'ruby'
on_ft = 'python'
on_ft = 'perl'
on_ft = 'javascript'
