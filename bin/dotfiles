#!/bin/bash

# setup dotfiles
DIR=".dotfiles"
BACKUP_DIR=".dotfiles_backup"
BACKUP_PATH=$HOME/$BACKUP_DIR/`date +%Y-%m-%d-%H-%M-%S`

# color
RES_COL=60
MOVE_TO_COL="echo -en \\033[${RES_COL}G"
SETCOLOR_SUCCESS="echo -en \\033[1;32m"
SETCOLOR_FAILURE="echo -en \\033[1;31m"
SETCOLOR_WARNING="echo -en \\033[1;33m"
SETCOLOR_NORMAL="echo -en \\033[0;39m"
SETCOLOR_ATTENTION="echo -en \\033[1;37m"
SETCOLOR_INFO="echo -en \\033[1;34m"

notice() {
  $SETCOLOR_SUCCESS
  echo "$1"
  $SETCOLOR_NORMAL
}

warn() {
  $SETCOLOR_WARNING
  echo "$1"
  $SETCOLOR_NORMAL
}

attention() {
  $SETCOLOR_ATTENTION
  echo "$1"
  $SETCOLOR_NORMAL
}

info() {
  $SETCOLOR_INFO
  echo "$1"
  $SETCOLOR_NORMAL
}

success() {
  #$MOVE_TO_COL
  $SETCOLOR_SUCCESS
  echo -n "$1"
  $SETCOLOR_WARNING
  echo " ;)"
  $SETCOLOR_NORMAL
}

failure() {
  #$MOVE_TO_COL
  $SETCOLOR_FAILURE
  echo -n "$1"
  $SETCOLOR_WARNING
  echo " :("
  $SETCOLOR_NORMAL
}

init() {
    warn "Begins the initialization."
    cd $HOME/$DIR
    git submodule init
    git submodule foreach 'git pull origin master'
    git submodule update
}

link() {
    echo -n "Backup dir: "
    attention "$BACKUP_PATH"
    mkdir -p $BACKUP_PATH

    info "Make links for dotfiles."
    link_zsh
    link_bash
    link_git
    link_vim
    link_vc
    link_rc
}

link_zsh() {
    if [ -L $HOME/.zshrc ]; then
        rm -rf  $HOME/.zshrc
    elif [ -f $HOME/.zshrc ]; then
        mv $HOME/.zshrc $BACKUP_PATH
    fi
    ln -fsv $HOME/$DIR/_zsh/.zshrc $HOME/.zshrc

    if [ -L $HOME/.zshenv ]; then
        rm -rf  $HOME/.zshenv
    elif [ -f $HOME/.zshenv ]; then
        mv $HOME/.zshenv $BACKUP_PATH
    fi
    ln -fsv $HOME/$DIR/_zsh/.zshenv $HOME/.zshenv

    if [ -L $HOME/.zsh_aliases ]; then
        rm -rf  $HOME/.zsh_aliases
    elif [ -f $HOME/.zsh_aliases ]; then
        mv $HOME/.zsh_aliases $BACKUP_PATH
    fi
    ln -f $HOME/$DIR/_zsh/.zsh_aliases $HOME/.zsh_aliases

    if [ -L $HOME/.oh-my-zsh ]; then
        rm -rf $HOME/.oh-my-zsh
    elif [ -d $HOME/.oh-my-zsh ]; then
        mv $HOME/.oh-my-zsh $BACKUP_PATH
    fi
    ln -fsv $HOME/$DIR/_zsh/oh-my-zsh $HOME/.oh-my-zsh

    if [ -L $HOME/.zsh ]; then
        rm -rf $HOME/.zsh
    elif [ -d $HOME/.zsh ]; then
        mv $HOME/.zsh $BACKUP_PATH
    fi
    ln -fsv $HOME/$DIR/_zsh $HOME/.zsh
}

link_bash() {
    if [ -L $HOME/.bash_profile ]; then
        rm -rf $HOME/.bash_profile
    elif [ -f $HOME/.bash_profile ]; then
        mv $HOME/.bash_profile $BACKUP_PATH
    fi
    ln -fsv $HOME/$DIR/_bash/.bash_profile $HOME/.bash_profile

    if [ -L $HOME/.bashrc ]; then
        rm -rf $HOME/.bashrc
    elif [ -f $HOME/.bashrc ]; then
        mv $HOME/.bashrc $BACKUP_PATH
    fi
    ln -fsv $HOME/$DIR/_bash/.bashrc $HOME/.bashrc

    if [ -L $HOME/.bash_aliases ]; then
        rm -rf $HOME/.bash_aliases
    elif [ -f $HOME/.bash_aliases ]; then
        mv $HOME/.bash_aliases $BACKUP_PATH
    fi
    cp -f  $HOME/$DIR/_bash/.bash_aliases $HOME/.bash_aliases

    if [ -L $HOME/.inputrc ]; then
        rm -rf $HOME/.inputrc
    elif [ -f $HOME/.inputrc ]; then
        mv $HOME/.inputrc $BACKUP_PATH
    fi
    ln -fsv $HOME/$DIR/_bash/.inputrc $HOME/.inputrc
}

link_git() {
    if [ -L $HOME/.gitconfig ]; then
        rm -rf $HOME/.gitconfig
    elif [ -f $HOME/.gitconfig ]; then
        mv $HOME/.gitconfig $BACKUP_PATH
    fi
    ln -fsv $HOME/$DIR/_git/.gitconfig $HOME/.gitconfig

    if [ -L $HOME/.gitignore ]; then
        rm -rf $HOME/.gitignore
    elif [ -f $HOME/.gitignore ]; then
        mv $HOME/.gitignore $BACKUP_PATH
    fi
    ln -fsv $HOME/$DIR/_git/.gitignore $HOME/.gitignore
}

link_vim() {
    if [ -L $HOME/.vimrc ]; then
        rm -rf $HOME/.vimrc
    elif [ -f $HOME/.vimrc ]; then
        mv $HOME/.vimrc $BACKUP_PATH
    fi
    ln -fs $HOME/$DIR/_vim/.vimrc $HOME/.vimrc

    if [ -L $HOME/.vimrc.local ]; then
        rm -rf $HOME/.vimrc.local
    elif [ -f $HOME/.vimrc.local ]; then
        mv $HOME/.vimrc.local $BACKUP_PATH
    fi
    cp -f  $HOME/$DIR/_vim/.vimrc.local $HOME/.vimrc.local

    if [ -L $HOME/.vim ]; then
        rm -rf $HOME/.vim
    elif [ -d $HOME/.vim ]; then
        mv $HOME/.vim $BACKUP_PATH
    fi
    ln -fs $HOME/$DIR/_vim $HOME/.vim
}

link_vc() {
    if [ -L $HOME/.tmux.conf ]; then
        rm -rf $HOME/.tmux.conf
    elif [ -f $HOME/.tmux.conf ]; then
        mv $HOME/.tmux.conf $BACKUP_PATH
    fi
    ln -fsv $HOME/$DIR/_vc/.tmux.conf $HOME/.tmux.conf

    if [ -L $HOME/.screenrc ]; then
        rm -rf $HOME/.screenrc
    elif [ -f $HOME/.screenrc ]; then
        mv $HOME/.screenrc $BACKUP_PATH
    fi
    ln -fsv $HOME/$DIR/_vc/.screenrc $HOME/.screenrc
}

link_rc() {
    # pry
    if [ -L $HOME/.pryrc ]; then
        rm -rf  $HOME/.pryrc
    elif [ -f $HOME/.pryrc ]; then
        mv $HOME/.pryrc $BACKUP_PATH
    fi
    ln -fsv $HOME/$DIR/_rc/.pryrc $HOME/.pryrc

    # gem
    if [ -L $HOME/.gemrc ]; then
        rm -rf  $HOME/.gemrc
    elif [ -f $HOME/.gemrc ]; then
        mv $HOME/.gemrc $BACKUP_PATH
    fi
    ln -fsv $HOME/$DIR/_rc/.gemrc $HOME/.gemrc

    # ack
    if [ -L $HOME/.ackrc ]; then
        rm -rf  $HOME/.ackrc
    elif [ -f $HOME/.ackrc ]; then
        mv $HOME/.ackrc $BACKUP_PATH
    fi
    ln -fsv $HOME/$DIR/_rc/.ackrc $HOME/.ackrc

    # tig
    if [ -L $HOME/.tigrc ]; then
        rm -rf  $HOME/.tigrc
    elif [ -f $HOME/.tigrc ]; then
        mv $HOME/.tigrc $BACKUP_PATH
    fi
    ln -fsv $HOME/$DIR/_rc/.tigrc $HOME/.tigrc
}

link_for_mac() {
    if [ -d /Users ]; then
        warn "Init for mac."
        info "Make links for dotfiles."

        # macvim
        if [ -L $HOME/.gvimrc_first.vim ]; then
            rm -rf $HOME/.gvimrc_first.vim
        elif [ -f $HOME/.gvimrc_first.vim ]; then
            mv $HOME/.gvimrc_first.vim $BACKUP_PATH
        fi
        ln -fsv $HOME/$DIR/_vim/.gvimrc_first.vim $HOME/.gvimrc_first.vim

        # vimperator
        if [ -L $HOME/.vimperatorrc ]; then
            rm -rf $HOME/.vimperatorrc
        elif [ -f $HOME/.vimperatorrc ]; then
            mv $HOME/.vimperatorrc $BACKUP_PATH
        fi
        ln -fsv $HOME/$DIR/_vimperator/.vimperatorrc $HOME/.vimperatorrc

        if [ -L $HOME/.vimperator ]; then
            rm -rf $HOME/.vimperator
        elif [ -d $HOME/.vimperator ]; then
            mv $HOME/.vimperator $BACKUP_PATH
        fi
        ln -fsv $HOME/$DIR/_vimperator $HOME/.vimperator

        if [ -L $HOME/Brewfile ]; then
            rm -rf $HOME/Brewfile
        elif [ -f $HOME/Brewfile ]; then
            mv $HOME/Brewfile $BACKUP_PATH
        fi
        ln -fsv $HOME/$DIR/Brewfile $HOME/Brewfile

        if [ ! -f $HOME/.config ]; then
            mkdir -p $HOME/.config
        fi

        if [ ! -f $HOME/.ghq ]; then
            mkdir -p $HOME/.ghq
        fi

        if [ -L $HOME/.config/peco ]; then
            rm -rf $HOME/.config/peco
        elif [ -f $HOME/.config/peco ]; then
            mv $HOME/.config/peco $BACKUP_PATH
        fi
        ln -fsv $HOME/$DIR/_config/peco $HOME/.config/peco

        if [ -L $HOME/.config/alacritty ]; then
            rm -rf $HOME/.config/alacritty
        elif [ -f $HOME/.config/alacritty ]; then
            mv $HOME/.config/alacritty $BACKUP_PATH
        fi
        ln -fsv $HOME/$DIR/_config/alacritty $HOME/.config/alacritty

        if [ -L $HOME/.config/karabiner ]; then
            rm -rf $HOME/.config/karabiner
        elif [ -f $HOME/.config/karabiner ]; then
            mv $HOME/.config/karabiner $BACKUP_PATH
        fi
        ln -fsv $HOME/$DIR/_config/karabiner $HOME/.config/karabiner
    fi
}

setup_vim() {
    info "Vim dein install."
    vim +'call dein#install()' +qall
}

setup_go() {
    if [ `which go >/dev/null 2>&1 ; echo $?` -eq 0 ]; then
        go get github.com/nsf/gocode
        go get golang.org/x/tools/cmd/goimports
        go get golang.org/x/tools/cmd/godoc
        go get golang.org/x/tools/cmd/cover
        go get golang.org/x/lint/golint
    else
        notice "Skip golang setup, So golang not found"
    fi
}

setup_ruby() {
    if [ -d /Users ]; then
        if [ `which rbenv >/dev/null 2>&1 ; echo $?` -eq 1 ]; then
            # https://gist.github.com/linyows/25dd64a7a93ec3040b91
            curl -s -L http://git.io/vYOur | sh
        else
            notice "Skip rbenv setup, So rbenv not found"
        fi
    fi
}

setup_nodejs() {
    if [ -d /Users ]; then
        if [ `which nodebrew >/dev/null 2>&1 ; echo $?` -eq 0 ]; then
            nodebrew install-binary latest
            nodebrew use latest
        else
            notice "Skip nodejs setup, So nodebrew not found"
        fi
    fi
}

setup_homebrew_and_install_pkgs() {
    # https://brew.sh/
    if [ -d /Users ]; then
        if [ `which brew >/dev/null 2>&1 ; echo $?` -eq 1 ]; then
            /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
            brew install $(cat $HOME/$DIR/brewlist)
        else
            notice "Skip homebrew setup, So homebrew not found"
        fi
    fi
}

print_bye() {
    if [ $? -eq 0 ]; then
        success "Successfully initialized!"
    else
        failure "Some problems occur..."
    fi
}

case "$1" in
    quick)
        init
        link
        link_for_mac
        print_bye
        ;;
    vim)
        setup_vim
        ;;
    *)
        init
        link
        link_for_mac
        setup_homebrew_and_install_pkgs
        setup_vim
        setup_go
        setup_nodejs
        setup_ruby
        print_bye
        exit 2
esac
