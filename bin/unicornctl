#!/bin/bash

#
# color
#
RES_COL=60
MOVE_TO_COL="echo -en \\033[${RES_COL}G"
SETCOLOR_SUCCESS="echo -en \\033[1;32m"
SETCOLOR_FAILURE="echo -en \\033[1;31m"
SETCOLOR_WARNING="echo -en \\033[1;33m"
SETCOLOR_NORMAL="echo -en \\033[0;39m"
SETCOLOR_MODERATION="echo -en \\033[1;30m"

notice() {
  $SETCOLOR_SUCCESS
  echo "$1"
  $SETCOLOR_NORMAL
}

warn() {
  $SETCOLOR_WARNING
  echo "$1"
  $SETCOLOR_NORMAL
}

note() {
  $SETCOLOR_MODERATION
  echo "$1"
  $SETCOLOR_NORMAL
}

success() {
  #$MOVE_TO_COL
  $SETCOLOR_SUCCESS
  echo -n "$1"
  $SETCOLOR_WARNING
  echo " ;)"
  $SETCOLOR_NORMAL
}

failure() {
  #$MOVE_TO_COL
  $SETCOLOR_FAILURE
  echo -n "$1"
  $SETCOLOR_WARNING
  echo " :("
  $SETCOLOR_NORMAL
}

#
# config
#
UNICORN=unicorn
PROJECT_ROOT=`pwd`
UNICORN_CONFIG=$PROJECT_ROOT/config/unicorn.conf
HOST=127.0.0.1

start() {
    echo -n "Starting Unicorn: "
    cd $PROJECT_ROOT
    if [ "$PORT" = '' ]; then
      cmd="bundle exec $UNICORN -c $UNICORN_CONFIG -D"
    else
      cmd="bundle exec $UNICORN -c $UNICORN_CONFIG -o $HOST -p $PORT -D"
    fi
    result=`$cmd 2>&1`
    if [ $? -eq 0 ]; then
        success "Done!"
        note "=> $cmd"
    else
        failure "Failed..."
        note "=> $cmd"
        echo $result
    fi
}

stop() {
    echo -n "Stopping Unicorn: "
    cmd="kill -s QUIT $PID"
    result=`$cmd 2>&1`
    if [ $? -eq 0 ]; then
        success "Done!"
        note "=> $cmd"
    else
        failure "Failed..."
        note "=> $cmd"
        echo $result
    fi
}

reload() {
    echo -n "Reloading Unicorn: "
    cmd="kill -s USR2 $PID"
    result=`$cmd 2>&1`
    if [ $? -eq 0 ]; then
        success "Done!"
        note "=> $cmd"
    else
        failure "Failed..."
        note "=> $cmd"
        echo $result
    fi
}

launch() {
    echo -n "Launching unicorn daemon: "
    echo "launchctl load $unicorn_plist && link_assets_dir $PROJECT_ROOT"
    launchctl load $unicorn_plist && link_assets_dir $PROJECT_ROOT
}

port() {
    if [ -f $PROJECT_ROOT/.unicorn ]; then
        int=`cat $PROJECT_ROOT/.unicorn 2> /dev/null`
    elif [ -f $HOME/.unicorn ]; then
        int=`cat $HOME/.unicorn 2> /dev/null`
    else
        int=''
    fi
    echo "$int"
}

pid() {
    if [ "$PORT" = "" ]; then
      unicorn_pid=`cat $PROJECT_ROOT/tmp/pids/unicorn.pid 2> /dev/null`
    else
      unicorn_process=`ps ax | grep $PORT | grep -v "grep" | grep master | sed "s/^ *//"`
      unicorn_pid=${unicorn_process%% *}
    fi
    echo $unicorn_pid
}

is_running() {
    if [ "$PID" = "" ]; then
        return 1
    else
        return 0
    fi
}

echo_started() {
    warn "Unicorn has already started..."
    echo $unicorn_process
}

echo_not_started() {
    warn "Unicorn has not started..."
}

PORT="$(port)"
PID="$(pid)"

case "$1" in
    start)
        (is_running && echo_started) || start
        ;;
    stop)
        (is_running && stop) || echo_not_started
        ;;
    restart)
        (is_running && stop && sleep 1 && start) || echo_not_started
        ;;
    reload)
        (is_running && reload) || echo_not_started
        ;;
    launch)
        launch
        ;;
    pid)
        notice $PID
        ;;
    *)
        echo $"Usage: $0 {pid|start|stop|restart|reload}"
        exit 2
esac
